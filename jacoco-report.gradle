tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

task jacocoDebugTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    def fileFilter = [
            '**/*Fragment.class',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/databinding/*',
            '**/callback/*',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/di/module/*',
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module.*', /* filtering Dagger modules classes */
            '**/*Dagger*.*',/* filtering Dagger-generated classes */
            '**/*MembersInjector*.*',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*', /* filtering `sealed` and `data` classes */
            '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
            '**/*Args*.*', /* filtering Navigation Component generated classes */
            '**/*Directions*.*' /* filtering Navigation Component generated classes */
    ]

    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${buildDir}/tmp/classes", excludes: fileFilter),
            fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter),
    ]))

    def coverageSourceDirs = [
            "$project.rootDir/src/main/java/**",
            "$project.projectDir/src/main/kotlin/**"
    ]
    additionalSourceDirs.setFrom(files(coverageSourceDirs))
    sourceDirectories.setFrom(files(coverageSourceDirs))

    def uiTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/", includes: ["**/*.ec"])

    executionData(files([
            "$project.buildDir/jacoco/testDebugUnitTest.exec",
            uiTestsData
    ]))
}
